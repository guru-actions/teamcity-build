---
apiVersion: automation.cloudbees.io/v1alpha1
kind: action
name: run teamcity build
description: runs a team city build
inputs:
  serverurl:
    description: teamcity server url
    required: true
  jobid:
    description: project job id
    required: true
  user:
    description: user to authenticate
    required: true
  credential:
    description: credential to use
    required: true
outputs:
  buildnumber:
    value: ${{ steps.run_build.outputs.BUILD_ID }}
    description: build number
  buildstatus:
    value: ${{ steps.run_build.outputs.BUILD_STATUS }}
    description: build status
runs:
  using: composite
  steps:
    - id: run_build
      name: Run TeamCity
      uses: docker://gururepservice/curljq:latest
      shell: sh
      run: |

        #!/usr/bin/env bash
        jq --version
        printf "starting \n"
        # Set your TeamCity server URL, username, and password
        TEAMCITY_URL="${{ inputs.serverurl }}"
        USERNAME="${{ inputs.user }}"
        PASSWORD="${{ inputs.credential }}"
        DEBUG="true"
        BUILD_POLL_TIME=5
        BRANCH_NAME="main"
        logdebug() {
        if [ "$DEBUG" = true ]; then
          printf "DEBUG: $(date +%F_%H-%M-%S): $1\n"
       
          fi
        }

        log() {
    
          printf "$(date +%F_%H-%M-%S): $1\n"
         
        }
        # Specify the ID of the TeamCity project and the ID of the job to trigger
        BUILD_CONFIG_ID="${{ inputs.jobid }}"
        
        # Specify the parameters to pass to the build configuration
        PARAMETERS='{"p1":"foo1234"}'
        
        BUILD_REQUEST=$(cat <<EOF
        {
          "buildType": {
            "id": "$BUILD_CONFIG_ID"
          },
          "branchName": "$BRANCH_NAME",
          "properties": {
            "property": $(echo "$PARAMETERS" | jq -r 'to_entries | map({name: .key, value: .value})')
          }
        }
        EOF
        )
        
        # Trigger the build by sending a POST request to the build queue endpoint
        RESPONSE=$(curl -s -u "$USERNAME:$PASSWORD" -X POST "$TEAMCITY_URL/app/rest/buildQueue" \
                    -H "Content-Type: application/json" \
                    -d "$BUILD_REQUEST" \
                    --header "Accept: application/json")
        logdebug "$RESPONSE\n"
        echo "checking json"
        if echo "$RESPONSE" | jq -e . &> /dev/null; then
           logdebug "Parsed JSON successfully"
        else
            log "Error: $RESPONSE"
            exit 9
        fi

         echo "finished checking json"
        
        echo $RESPONSE |jq
        # Extract the build ID from the response
        BUILD_ID=$(echo "$RESPONSE" | jq -r '.id')
        
        # Print the build ID
        log "Build triggered with ID: $BUILD_ID"
        
        while true; do
            # Check the status of the build
            BUILD_RESPONSE=$(curl -s -u "$USERNAME:$PASSWORD" "$TEAMCITY_URL/httpAuth/app/rest/builds/id:$BUILD_ID" --header "Accept: application/json")
            # Check if there was an error in the response
            
        
           if echo "$BUILD_RESPONSE" | jq -e . &> /dev/null; then
              #echo "Parsed JSON successfully"
        
              ERROR=$(echo "$BUILD_RESPONSE" | jq -r '.error')
              if [ "$ERROR" != "null" ]; then
                log "Error checking build status: $ERROR"
                exit 1
              fi
            else
              log "Error: $BUILD_RESPONSE"
              exit 1
            fi
        
            # Extract the build status from the response
            BUILD_STATUS=$(echo "$BUILD_RESPONSE" | jq -r '.state')
            log "build status - $BUILD_STATUS"
            # If the build is finished, break out of the loop
            
            if [ "$BUILD_STATUS" != "queued" ] && [ "$BUILD_STATUS" != "running" ]; then
                break
            fi
        
          
            # Sleep for a few seconds before checking again
            sleep $BUILD_POLL_TIME
        done
        
        # Print the final status of the build
        log "Build finished with status: $BUILD_STATUS"
        
        echo $BUILD_RESPONSE |jq
        BUILD_STATUS=$(echo "$BUILD_RESPONSE" | jq -r '.state')
